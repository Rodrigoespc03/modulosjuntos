const axios = require('axios');

const API_BASE_URL = 'http://localhost:3002/api';
const INVENTORY_API_BASE_URL = 'http://localhost:3000/api';

// Funci√≥n para obtener token de autenticaci√≥n
async function getAuthToken() {
  try {
    const response = await axios.post(`${API_BASE_URL}/login`, {
      email: 'rodrigoespc03@gmail.com',
      password: '123456'
    });
    return response.data.token;
  } catch (error) {
    console.error('Error obteniendo token:', error.response?.data || error.message);
    throw error;
  }
}

// Funci√≥n helper para headers con autenticaci√≥n
function getAuthHeaders(token) {
  return {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  };
}

// Prueba 1: Verificar que el m√≥dulo de inventario est√° funcionando
async function testInventoryHealth() {
  console.log('\nüîç **Prueba 1: Verificar salud del m√≥dulo de inventario**');
  try {
    const response = await axios.get(`${INVENTORY_API_BASE_URL}/health`);
    console.log('‚úÖ M√≥dulo de inventario funcionando:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Error:', error.response?.data || error.message);
    throw error;
  }
}

// Prueba 2: Obtener productos del inventario
async function testGetProducts(token) {
  console.log('\nüîç **Prueba 2: Obtener productos del inventario**');
  try {
    const response = await axios.get(`${INVENTORY_API_BASE_URL}/products`, {
      headers: getAuthHeaders(token)
    });
    console.log('‚úÖ Productos obtenidos:', response.data.length, 'productos');
    return response.data;
  } catch (error) {
    console.error('‚ùå Error:', error.response?.data || error.message);
    throw error;
  }
}

// Prueba 3: Obtener productos por categor√≠a
async function testGetProductsByCategory(token) {
  console.log('\nüîç **Prueba 3: Obtener productos por categor√≠a**');
  try {
    const response = await axios.get(`${INVENTORY_API_BASE_URL}/products/category/Test`, {
      headers: getAuthHeaders(token)
    });
    console.log('‚úÖ Productos por categor√≠a obtenidos:', response.data.length, 'productos');
    return response.data;
  } catch (error) {
    console.error('‚ùå Error:', error.response?.data || error.message);
    throw error;
  }
}

// Prueba 4: Verificar rutas de inventory
async function testInventoryRoutes(token) {
  console.log('\nüîç **Prueba 4: Verificar rutas de inventory**');
  try {
    const response = await axios.get(`${INVENTORY_API_BASE_URL}/inventory/exit/by-category?sedeId=test`, {
      headers: getAuthHeaders(token)
    });
    console.log('‚úÖ Rutas de inventory funcionando:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Error:', error.response?.data || error.message);
    throw error;
  }
}

// Funci√≥n principal de pruebas
async function runTests() {
  console.log('üöÄ **INICIANDO PRUEBAS SIMPLES DE INVENTARIO**');
  console.log('==============================================');

  try {
    // Obtener token de autenticaci√≥n
    const token = await getAuthToken();
    console.log('‚úÖ Token obtenido correctamente');

    // Ejecutar pruebas
    await testInventoryHealth();
    await testGetProducts(token);
    await testGetProductsByCategory(token);
    await testInventoryRoutes(token);

    console.log('\nüéâ **TODAS LAS PRUEBAS SIMPLES DE INVENTARIO COMPLETADAS**');
    console.log('\nüìã **RESUMEN:**');
    console.log('   ‚úÖ M√≥dulo de inventario funcionando');
    console.log('   ‚úÖ Autenticaci√≥n funcionando correctamente');
    console.log('   ‚úÖ Rutas de productos disponibles');
    console.log('   ‚úÖ Rutas de inventory disponibles');
    
  } catch (error) {
    console.error('\nüí• **ERROR EN LAS PRUEBAS:**', error.message);
    process.exit(1);
  }
}

// Ejecutar pruebas
runTests(); 