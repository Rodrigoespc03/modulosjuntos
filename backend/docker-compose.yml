# üê≥ DOCKER COMPOSE - SISTEMA PROCURA
# Configuraci√≥n completa para desarrollo y producci√≥n

version: '3.8'

services:
  # ========================================
  # BACKEND API
  # ========================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: procura-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - PORT=3000
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./temp:/app/temp
    depends_on:
      - postgres
      - redis
    networks:
      - procura-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ========================================
  # BASE DE DATOS POSTGRESQL
  # ========================================
  postgres:
    image: postgres:15-alpine
    container_name: procura-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-procura}
      - POSTGRES_USER=${POSTGRES_USER:-procura}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-procura_secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - procura-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-procura}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================================
  # CACHE REDIS
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: procura-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-procura_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - procura-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ========================================
  # MONITORING - PROMETHEUS
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: procura-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - procura-network

  # ========================================
  # MONITORING - GRAFANA
  # ========================================
  grafana:
    image: grafana/grafana:latest
    container_name: procura-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - procura-network

  # ========================================
  # NGINX REVERSE PROXY (OPCIONAL)
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: procura-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - procura-network

# ========================================
# VOLUMES
# ========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ========================================
# NETWORKS
# ========================================
networks:
  procura-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16



