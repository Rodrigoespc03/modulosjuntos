generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// MODELOS PRINCIPALES DEL SISTEMA
// ========================================

model organizaciones {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre           String         @db.VarChar(255)
  ruc              String?        @db.VarChar(20)
  direccion        String?
  telefono         String?        @db.VarChar(20)
  email            String?        @db.VarChar(255)
  logo_url         String?
  color_primario   String?        @default("#3B82F6") @db.VarChar(7)
  color_secundario String?        @default("#1F2937") @db.VarChar(7)
  created_at       DateTime?      @default(now()) @db.Timestamp(6)
  updated_at       DateTime?      @default(now()) @db.Timestamp(6)
  
  // Relaciones
  consultorios     consultorios[]
  pacientes        pacientes[]
  servicios        servicios[]
  usuarios         usuarios[]
}

model usuarios {
  id                       String                  @id @default(uuid())
  nombre                   String
  email                    String                  @unique
  telefono                 String
  created_at               DateTime                @default(now())
  updated_at               DateTime                @updatedAt
  rol                      Rol
  apellido                 String
  consultorio_id           String
  googleAccessToken        String?
  googleRefreshToken       String?
  googleTokenExpiry        DateTime?               @db.Timestamp(6)
  googleCalendarId         String?
  organizacion_id          String                  @db.Uuid
  puede_editar_cobros      Boolean                 @default(false)
  puede_eliminar_cobros    Boolean                 @default(false)
  puede_gestionar_usuarios Boolean                 @default(false)
  puede_ver_historial      Boolean                 @default(false)
  
  // Relaciones
  citas                    citas[]
  cobros                   cobros[]
  disponibilidad_medico    disponibilidad_medico[]
  historial_cobros         historial_cobros[]
  organizaciones           organizaciones          @relation(fields: [organizacion_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuarios_organizacion")
  consultorios             consultorios            @relation(fields: [consultorio_id], references: [id])
  whatsapp_config          whatsapp_config?
  whatsapp_messages        whatsapp_messages[]
  whatsapp_reminders       whatsapp_reminders[]
  whatsapp_templates       whatsapp_templates[]

  @@unique([email, organizacion_id], map: "unique_usuario_email_organizacion")
  @@index([consultorio_id], map: "idx_usuarios_consultorio_id")
  @@index([email, organizacion_id], map: "idx_usuarios_email_organizacion")
  @@index([organizacion_id, email], map: "idx_usuarios_org_email")
  @@index([organizacion_id], map: "idx_usuarios_organizacion_id")
}

model pacientes {
  id                  String              @id @default(uuid())
  nombre              String
  fecha_nacimiento    DateTime
  genero              String
  direccion           String?
  telefono            String
  email               String
  documento_identidad String?
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  apellido            String
  organizacion_id     String              @db.Uuid
  
  // Relaciones
  InventoryUsage      InventoryUsage[]
  citas               citas[]
  cobros              cobros[]
  organizaciones      organizaciones      @relation(fields: [organizacion_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pacientes_organizacion")
  whatsapp_messages   whatsapp_messages[]

  @@unique([email, organizacion_id], map: "unique_paciente_email_organizacion")
  @@index([email, organizacion_id], map: "idx_pacientes_email_organizacion")
  @@index([nombre, apellido], map: "idx_pacientes_nombre_apellido")
  @@index([organizacion_id, nombre], map: "idx_pacientes_org_nombre")
  @@index([organizacion_id], map: "idx_pacientes_organizacion_id")
}

model consultorios {
  id                     String                  @id @default(uuid())
  nombre                 String
  direccion              String
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt
  organizacion_id        String                  @db.Uuid
  
  // Relaciones
  citas                  citas[]
  cobro_conceptos        cobro_conceptos[]
  configuracion_permisos configuracion_permisos?
  organizaciones         organizaciones          @relation(fields: [organizacion_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_consultorios_organizacion")
  precios_consultorio    precios_consultorio[]
  usuarios               usuarios[]

  @@index([organizacion_id], map: "idx_consultorios_organizacion_id")
}

// ========================================
// MODELOS DE COBROS
// ========================================

model cobros {
  id                 String               @id @default(uuid())
  fecha_cobro        DateTime
  monto_total        Float
  notas              String?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  paciente_id        String
  usuario_id         String
  estado             EstadoCobro
  metodo_pago        MetodoPago?
  
  // Relaciones
  cobro_conceptos    cobro_conceptos[]
  pacientes          pacientes            @relation(fields: [paciente_id], references: [id])
  usuarios           usuarios             @relation(fields: [usuario_id], references: [id])
  historial_cobros   historial_cobros[]
  metodos_pago_cobro metodos_pago_cobro[]

  @@index([estado], map: "idx_cobros_estado")
  @@index([fecha_cobro(sort: Desc)], map: "idx_cobros_fecha_cobro")
  @@index([paciente_id], map: "idx_cobros_paciente_id")
  @@index([usuario_id], map: "idx_cobros_usuario_id")
}

model cobro_conceptos {
  id              String       @id @default(uuid())
  cantidad        Int
  subtotal        Float
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  cobro_id        String
  consultorio_id  String
  precio_unitario Float
  servicio_id     String
  
  // Relaciones
  cobros          cobros       @relation(fields: [cobro_id], references: [id])
  consultorios    consultorios @relation(fields: [consultorio_id], references: [id])
  servicios       servicios    @relation(fields: [servicio_id], references: [id])

  @@index([cobro_id], map: "idx_cobro_conceptos_cobro_id")
  @@index([consultorio_id], map: "idx_cobro_conceptos_consultorio_id")
  @@index([servicio_id], map: "idx_cobro_conceptos_servicio_id")
}

model historial_cobros {
  id               String     @id @default(uuid())
  created_at       DateTime   @default(now())
  cobro_id         String
  detalles_antes   Json?
  detalles_despues Json
  tipo_cambio      TipoCambio
  usuario_id       String
  
  // Relaciones
  cobros           cobros     @relation(fields: [cobro_id], references: [id])
  usuarios         usuarios   @relation(fields: [usuario_id], references: [id])

  @@index([cobro_id], map: "idx_historial_cobros_cobro_id")
  @@index([created_at(sort: Desc)], map: "idx_historial_cobros_created_at")
}

model metodos_pago_cobro {
  id          String     @id @default(uuid())
  cobro_id    String
  metodo_pago MetodoPago
  monto       Float
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  
  // Relaciones
  cobros      cobros     @relation(fields: [cobro_id], references: [id])

  @@index([cobro_id], map: "idx_metodos_pago_cobro_cobro_id")
}

model servicios {
  id              String            @id @default(uuid())
  nombre          String
  descripcion     String?
  precio_base     Float
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  organizacion_id String            @db.Uuid
  
  // Relaciones
  cobro_conceptos cobro_conceptos[]
  organizaciones  organizaciones    @relation(fields: [organizacion_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_servicios_organizacion")

  @@index([organizacion_id, nombre], map: "idx_servicios_org_nombre")
  @@index([organizacion_id], map: "idx_servicios_organizacion_id")
}

model precios_consultorio {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  concepto       String
  consultorio_id String
  precio         Float
  
  // Relaciones
  consultorios   consultorios @relation(fields: [consultorio_id], references: [id])
}

model configuracion_permisos {
  id                             String       @id @default(uuid())
  consultorio_id                 String       @unique
  secretaria_editar_cobros       Boolean      @default(false)
  secretaria_eliminar_cobros     Boolean      @default(false)
  enfermera_entradas_inventario  Boolean      @default(true)
  enfermera_salidas_inventario   Boolean      @default(true)
  secretaria_entradas_inventario Boolean      @default(true)
  secretaria_salidas_inventario  Boolean      @default(false)
  created_at                     DateTime     @default(now())
  updated_at                     DateTime     @updatedAt
  
  // Relaciones
  consultorios                   consultorios @relation(fields: [consultorio_id], references: [id], onDelete: Cascade)
}

// ========================================
// MODELOS DE CITAS
// ========================================

model citas {
  id                 String               @id @default(uuid())
  titulo             String?
  descripcion        String?
  estado             EstadoCita
  paciente_id        String
  usuario_id         String
  consultorio_id     String
  created_at         DateTime             @default(now())
  updated_at         DateTime
  color              String?              @default("#3B82F6")
  fecha_fin          DateTime
  fecha_inicio       DateTime
  es_recurrente      Boolean?             @default(false)
  regla_recurrencia  String?
  id_serie           String?
  googleEventId      String?
  exdates            Json?
  
  // Relaciones
  consultorios       consultorios         @relation(fields: [consultorio_id], references: [id])
  pacientes          pacientes            @relation(fields: [paciente_id], references: [id])
  usuarios           usuarios             @relation(fields: [usuario_id], references: [id])
  whatsapp_messages  whatsapp_messages[]
  whatsapp_reminders whatsapp_reminders[]

  @@index([consultorio_id], map: "idx_citas_consultorio_id")
  @@index([fecha_fin], map: "idx_citas_fecha_fin")
  @@index([fecha_inicio], map: "idx_citas_fecha_inicio")
  @@index([paciente_id], map: "idx_citas_paciente_id")
  @@index([usuario_id], map: "idx_citas_usuario_id")
}

model disponibilidad_medico {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  usuario_id  String
  dia_semana  Int
  hora_inicio String   @db.VarChar(5)
  hora_fin    String   @db.VarChar(5)
  
  // Relaciones
  usuarios    usuarios @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_usuario_disponibilidad")

  @@index([dia_semana], map: "idx_disponibilidad_medico_dia_semana")
  @@index([usuario_id], map: "idx_disponibilidad_medico_usuario_id")
}

model bloqueo_medico {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  usuario_id   String
  fecha_inicio DateTime @db.Timestamp(6)
  fecha_fin    DateTime @db.Timestamp(6)
  motivo       String?  @db.VarChar(255)

  @@index([fecha_fin], map: "idx_bloqueo_medico_fecha_fin")
  @@index([fecha_inicio], map: "idx_bloqueo_medico_fecha_inicio")
  @@index([usuario_id], map: "idx_bloqueo_medico_usuario_id")
}

// ========================================
// MODELOS DE INVENTARIO
// ========================================

model Product {
  id                   String                 @id @default(uuid())
  name                 String
  type                 ProductType
  unit                 ProductUnit
  description          String?
  costPerUnit          Decimal                @db.Decimal(10, 2)
  minStockLevel        Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  category             String?
  
  // Relaciones
  InventoryUsageDetail InventoryUsageDetail[]
  Movement             Movement[]
  ProductAllergen      ProductAllergen[]
  ProductExpiration    ProductExpiration[]
  StockBySede          StockBySede[]

  @@index([name])
}

model Sede {
  id                String              @id @default(uuid())
  name              String
  address           String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relaciones
  InventoryUsage    InventoryUsage[]
  Movement          Movement[]
  ProductExpiration ProductExpiration[]
  StockBySede       StockBySede[]
  User              User[]
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  name           String
  role           UserRole
  sedeId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // Relaciones
  InventoryUsage InventoryUsage[]
  Movement       Movement[]
  Sede           Sede             @relation(fields: [sedeId], references: [id])

  @@index([sedeId])
}

model InventoryUsage {
  id                  String                 @id @default(uuid())
  nombrePaciente      String
  tipoTratamiento     TipoTratamiento
  observaciones       String?
  tuvoReaccion        Boolean
  descripcionReaccion String?
  createdAt           DateTime               @default(now())
  sedeId              String
  updatedAt           DateTime               @updatedAt
  userId              String
  pacienteId          String?
  
  // Relaciones
  pacientes           pacientes?             @relation(fields: [pacienteId], references: [id])
  sede                Sede                   @relation(fields: [sedeId], references: [id])
  user                User                   @relation(fields: [userId], references: [id])
  details             InventoryUsageDetail[]

  @@index([userId])
  @@index([sedeId])
  @@index([pacienteId])
}

model InventoryUsageDetail {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  doses            Int?
  frascoLevel      Int?
  inventoryUsageId String
  movementId       String?
  productId        String
  quantity         Decimal        @db.Decimal(10, 2)
  totalCost        Decimal        @db.Decimal(10, 2)
  unitCost         Decimal        @db.Decimal(10, 2)
  units            Int?
  updatedAt        DateTime       @updatedAt
  
  // Relaciones
  inventoryUsage   InventoryUsage @relation(fields: [inventoryUsageId], references: [id])
  movement         Movement?      @relation(fields: [movementId], references: [id])
  product          Product        @relation(fields: [productId], references: [id])

  @@index([inventoryUsageId])
  @@index([productId])
  @@index([movementId])
}

model Movement {
  id                   String                 @id @default(uuid())
  userId               String
  sedeId               String
  productId            String
  type                 MovementType
  quantity             Decimal                @db.Decimal(10, 2)
  unitCost             Decimal                @db.Decimal(10, 2)
  totalCost            Decimal                @db.Decimal(10, 2)
  batchNumber          String?
  expiryDate           DateTime?
  createdAt            DateTime               @default(now())
  
  // Relaciones
  InventoryUsageDetail InventoryUsageDetail[]
  product              Product                @relation(fields: [productId], references: [id])
  sede                 Sede                   @relation(fields: [sedeId], references: [id])
  user                 User                   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([sedeId])
  @@index([productId])
  @@index([createdAt])
  @@index([batchNumber])
  @@index([expiryDate])
}

model StockBySede {
  id        String   @id @default(uuid())
  productId String
  sedeId    String
  quantity  Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  product   Product  @relation(fields: [productId], references: [id])
  sede      Sede     @relation(fields: [sedeId], references: [id])

  @@unique([productId, sedeId])
  @@index([productId])
  @@index([sedeId])
}

model ProductExpiration {
  id          String   @id @default(uuid())
  productId   String
  sedeId      String
  batchNumber String
  expiryDate  DateTime
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  product     Product  @relation(fields: [productId], references: [id])
  sede        Sede     @relation(fields: [sedeId], references: [id])

  @@index([productId])
  @@index([sedeId])
  @@index([expiryDate])
  @@index([batchNumber])
}

model Allergen {
  id                String            @id @default(uuid())
  name              String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  alxoidType        AlxoidType?
  isAlxoidExclusive Boolean           @default(false)
  
  // Relaciones
  ProductAllergen   ProductAllergen[]

  @@index([alxoidType])
  @@index([isAlxoidExclusive])
  @@index([name])
}

model ProductAllergen {
  id         String   @id @default(uuid())
  productId  String
  allergenId String
  mlPerDose  Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  
  // Relaciones
  allergen   Allergen @relation(fields: [allergenId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([productId, allergenId])
  @@index([productId])
  @@index([allergenId])
}

model Supplier {
  id             String   @id @default(uuid())
  name           String
  invoiceNumber  String?
  amountSupplied Decimal  @db.Decimal(10, 2)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([invoiceNumber])
  @@index([name])
}

// ========================================
// MODELOS DE WHATSAPP
// ========================================

model whatsapp_config {
  id                   String   @id @default(uuid())
  usuario_id           String   @unique
  whatsapp_business_id String?
  phone_number_id      String?
  access_token         String?
  webhook_verify_token String?
  is_active            Boolean  @default(false)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  
  // Relaciones
  usuarios             usuarios @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
}

model whatsapp_templates {
  id         String   @id @default(uuid())
  usuario_id String
  name       String
  language   String   @default("es")
  category   String
  components Json
  status     String   @default("PENDING")
  created_at DateTime @default(now())
  updated_at DateTime
  
  // Relaciones
  usuarios   usuarios @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
}

model whatsapp_messages {
  id                  String                @id @default(uuid())
  usuario_id          String
  paciente_id         String?
  cita_id             String?
  template_name       String?
  message_type        String
  content             Json
  phone_number        String
  status              WhatsAppMessageStatus
  whatsapp_message_id String?
  error_message       String?
  sent_at             DateTime?
  delivered_at        DateTime?
  read_at             DateTime?
  created_at          DateTime              @default(now())
  updated_at          DateTime
  
  // Relaciones
  citas               citas?                @relation(fields: [cita_id], references: [id])
  pacientes           pacientes?            @relation(fields: [paciente_id], references: [id])
  usuarios            usuarios              @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
}

model whatsapp_reminders {
  id             String    @id @default(uuid())
  usuario_id     String
  cita_id        String
  template_name  String
  reminder_type  String
  scheduled_time DateTime
  is_sent        Boolean   @default(false)
  sent_at        DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime
  
  // Relaciones
  citas          citas     @relation(fields: [cita_id], references: [id], onDelete: Cascade)
  usuarios       usuarios  @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
}

// ========================================
// ENUMS
// ========================================

enum MetodoPago {
  EFECTIVO
  TARJETA_DEBITO
  TARJETA_CREDITO
  TRANSFERENCIA
  OTRO
}

enum EstadoCobro {
  PENDIENTE
  COMPLETADO
  CANCELADO
}

enum Rol {
  DOCTOR
  SECRETARIA
  ADMINISTRADOR
  ENFERMERA
  PACIENTE
}

enum TipoCambio {
  CREACION
  EDICION
  ELIMINACION
  ACTUALIZACION
}

enum EstadoCita {
  PROGRAMADA
  EN_CURSO
  COMPLETADA
  CANCELADA
  NO_ASISTIO
}

enum AlxoidType {
  A
  B
}

enum MovementType {
  ENTRY
  EXIT
}

enum ProductType {
  SIMPLE
  COMPLEX
}

enum ProductUnit {
  ML
  PIECE
}

enum TipoTratamiento {
  INMUNOTERAPIA
  PRUEBAS
  GAMMAGLOBULINA
  VACUNAS_PEDIATRICAS
  MEDICAMENTOS_EXTRAS
  CONSULTA
}

enum UserRole {
  DOCTOR
  NURSE
  SECRETARY
}

enum WhatsAppMessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
} 