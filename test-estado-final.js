const axios = require('axios');

const API_BASE_URL = 'http://localhost:3002/api';
const INVENTORY_API_BASE_URL = 'http://localhost:3001/api';
const FRONTEND_URL = 'http://localhost:5175';

// Funci√≥n para obtener token de autenticaci√≥n
async function getAuthToken() {
  try {
    const response = await axios.post(`${API_BASE_URL}/login`, {
      email: 'rodrigoespc03@gmail.com',
      password: '123456'
    });
    return response.data.token;
  } catch (error) {
    console.error('Error obteniendo token:', error.response?.data || error.message);
    throw error;
  }
}

// Funci√≥n helper para headers con autenticaci√≥n
function getAuthHeaders(token) {
  return {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  };
}

// Prueba 1: Verificar backend principal
async function testMainBackend(token) {
  console.log('\nüîç **Prueba 1: Verificar backend principal**');
  try {
    const response = await axios.get(`${API_BASE_URL}/usuarios`, {
      headers: getAuthHeaders(token)
    });
    console.log('‚úÖ Backend principal funcionando correctamente');
    console.log(`   - Usuarios encontrados: ${response.data.length}`);
    return true;
  } catch (error) {
    console.error('‚ùå Error en backend principal:', error.response?.data || error.message);
    return false;
  }
}

// Prueba 2: Verificar permisos multi-tenant
async function testMultiTenantPermissions(token) {
  console.log('\nüîç **Prueba 2: Verificar permisos multi-tenant**');
  try {
    const response = await axios.get(`${API_BASE_URL}/permisos/mis-permisos`, {
      headers: getAuthHeaders(token)
    });
    console.log('‚úÖ Permisos multi-tenant funcionando');
    console.log(`   - Rol: ${response.data.rol}`);
    console.log(`   - Organizaci√≥n: ${response.data.organizacion?.nombre}`);
    console.log(`   - M√≥dulos disponibles: ${response.data.modulosDisponibles.join(', ')}`);
    return true;
  } catch (error) {
    console.error('‚ùå Error en permisos:', error.response?.data || error.message);
    return false;
  }
}

// Prueba 3: Verificar frontend
async function testFrontend() {
  console.log('\nüîç **Prueba 3: Verificar frontend**');
  try {
    const response = await axios.get(FRONTEND_URL, { timeout: 5000 });
    console.log('‚úÖ Frontend funcionando correctamente');
    console.log(`   - URL: ${FRONTEND_URL}`);
    return true;
  } catch (error) {
    console.error('‚ùå Error en frontend:', error.message);
    return false;
  }
}

// Prueba 4: Verificar m√≥dulo de inventario
async function testInventoryModule() {
  console.log('\nüîç **Prueba 4: Verificar m√≥dulo de inventario**');
  try {
    const response = await axios.get(`${INVENTORY_API_BASE_URL}/health`, { timeout: 5000 });
    console.log('‚úÖ M√≥dulo de inventario funcionando');
    console.log(`   - URL: ${INVENTORY_API_BASE_URL}`);
    return true;
  } catch (error) {
    console.log('‚ö†Ô∏è M√≥dulo de inventario no disponible');
    console.log(`   - Error: ${error.message}`);
    console.log(`   - URL intentada: ${INVENTORY_API_BASE_URL}`);
    return false;
  }
}

// Funci√≥n principal de pruebas
async function runFinalTests() {
  console.log('üöÄ **VERIFICACI√ìN FINAL DEL SISTEMA INTEGRADO**');
  console.log('==============================================');
  console.log('üìÖ Fecha:', new Date().toLocaleString());
  console.log('');

  try {
    // Obtener token de autenticaci√≥n
    const token = await getAuthToken();
    console.log('‚úÖ Token de autenticaci√≥n obtenido correctamente');

    // Ejecutar pruebas
    const backendOk = await testMainBackend(token);
    const permissionsOk = await testMultiTenantPermissions(token);
    const frontendOk = await testFrontend();
    const inventoryOk = await testInventoryModule();

    // Resumen final
    console.log('\nüìä **RESUMEN FINAL**');
    console.log('===================');
    console.log(`Backend Principal: ${backendOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`Permisos Multi-Tenant: ${permissionsOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`Frontend: ${frontendOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`M√≥dulo de Inventario: ${inventoryOk ? '‚úÖ' : '‚ö†Ô∏è'}`);

    // Evaluaci√≥n general
    const totalTests = 4;
    const passedTests = [backendOk, permissionsOk, frontendOk, inventoryOk].filter(Boolean).length;
    const successRate = (passedTests / totalTests) * 100;

    console.log(`\nüéØ **EVALUACI√ìN GENERAL: ${successRate}%**`);

    if (successRate >= 75) {
      console.log('\nüéâ **SISTEMA FUNCIONANDO CORRECTAMENTE**');
      console.log('   - El sistema principal est√° operativo');
      console.log('   - La integraci√≥n multi-tenant funciona');
      console.log('   - El frontend est√° disponible');
      
      if (!inventoryOk) {
        console.log('\n‚ö†Ô∏è **RECOMENDACI√ìN:**');
        console.log('   - El m√≥dulo de inventario necesita correcci√≥n de errores de TypeScript');
        console.log('   - Los errores son principalmente de enums y tipos');
        console.log('   - Una vez corregidos, el sistema estar√° 100% funcional');
      }
    } else if (successRate >= 50) {
      console.log('\n‚ö†Ô∏è **SISTEMA PARCIALMENTE FUNCIONAL**');
      console.log('   - Algunos componentes funcionan correctamente');
      console.log('   - Se requieren correcciones para funcionalidad completa');
    } else {
      console.log('\nüí• **SISTEMA CON PROBLEMAS**');
      console.log('   - Se requieren correcciones significativas');
    }

    // URLs de acceso
    console.log('\nüåê **URLS DE ACCESO:**');
    console.log(`Frontend: ${FRONTEND_URL}`);
    console.log(`Backend API: ${API_BASE_URL}`);
    if (inventoryOk) {
      console.log(`Inventario API: ${INVENTORY_API_BASE_URL}`);
    }

  } catch (error) {
    console.error('\nüí• **ERROR CR√çTICO EN LAS PRUEBAS:**', error.message);
    console.log('\nüîß **RECOMENDACIONES:**');
    console.log('1. Verificar que el backend principal est√© corriendo');
    console.log('2. Verificar la conexi√≥n a la base de datos');
    console.log('3. Revisar los logs de error para m√°s detalles');
  }
}

// Ejecutar pruebas
runFinalTests(); 